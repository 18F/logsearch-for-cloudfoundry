From c25b9e5596bea2357cf9b1f454a2bbd5efae5585 Mon Sep 17 00:00:00 2001
From: David Laing <david@davidlaing.com>
Date: Tue, 23 Jun 2015 06:09:27 +0100
Subject: [PATCH] Skeleton cf_authentication plugin based on HTTP Basic Auth

---
 package.json                                  |  3 +-
 src/server/plugins/cf_authentication/index.js | 63 +++++++++++++++++++++++++++
 2 files changed, 65 insertions(+), 1 deletion(-)
 create mode 100644 src/server/plugins/cf_authentication/index.js

diff --git a/package.json b/package.json
index 2bf4dc1..1db9287 100644
--- a/package.json
+++ b/package.json
@@ -66,7 +66,8 @@
     "requirefrom": "^0.2.0",
     "semver": "^4.3.6",
     "serve-favicon": "^2.2.0",
-    "through": "^2.3.6"
+    "through": "^2.3.6",    
+    "hapi-auth-basic": "2.0.0"
   },
   "devDependencies": {
     "bower": "^1.4.1",
diff --git a/src/server/plugins/cf_authentication/index.js b/src/server/plugins/cf_authentication/index.js
new file mode 100644
index 0000000..ad6855a
--- /dev/null
+++ b/src/server/plugins/cf_authentication/index.js
@@ -0,0 +1,63 @@
+var kibana = require('../../');
+
+module.exports = new kibana.Plugin({
+  /*
+  This will set the name of the plugin and will be used by the server for
+  namespacing purposes in the configuration. In Hapi you can expose methods and
+  objects to the system via `server.expose()`. Access to these attributes are done
+  via `server.plugins.<name>.<attribute>`. See the `elasticsearch` plugin for an
+  example of how this is done. If you omit this attribute then the plugin loader
+  will try to set it to the name of the parent folder.
+  */
+  name: 'authentication',
+
+  /*
+  This is an array of plugin names this plugin depends on. These are guaranteed
+  to load before the init() method for this plugin is executed.
+  */
+  require: [],
+
+  /*
+  This method is executed to create a Joi schema for the plugin. In the example
+  below the enabled configuration would be accessible via config.get('my_plugin.enabled').
+  The Joi module is passed to every config method and config methods can return promises
+  if they need to execute an async operation before setting the defaults. If you're
+  returning a promise then you should resolve the promise with the Joi schema.
+  */
+  config: function (Joi) {
+    var username = (process.env.USERNAME) ? process.env.USERNAME : 'admin';
+    var password = (process.env.PASSWORD) ? process.env.PASSWORD : 'admin';
+
+    return Joi.object({
+      username: Joi.string().default(username),
+      password: Joi.string().default(password)
+    }).default();
+  },
+
+  /*
+  The init method is where all the magic happens. It's essentially the same as the
+  register method for a Hapi plugin except it uses promises instead of a callback
+  pattern. Just return a promise when you execute an async operation.
+  */
+  init: function (server, options) {
+    var config = server.config();
+
+    server.log('authentication', JSON.stringify(config.get('authentication')));
+
+    var valid_username = config.get('authentication.username');
+    var valid_password = config.get('authentication.password');
+
+    var validate = function (username, password, callback) {
+        if ( username != valid_username
+          || password != valid_password ) {
+            return callback("Invalid credentials.  Please close all browser windows and try again", false);
+        }
+
+        //success!
+        return callback(null, true, { id: valid_username, name: valid_username });
+    };
+    server.register(require('hapi-auth-basic'), function (err) {
+      server.auth.strategy('simple', 'basic', 'required', { validateFunc: validate });
+    });
+  }
+});
-- 
1.9.1

