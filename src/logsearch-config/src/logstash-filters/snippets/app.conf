##--------------------------
# App conf. Parses app logs.|
##--------------------------

if [@index_type] == "app" {

    mutate {
      add_tag => [ "app" ]
    }

    # Parse Cloud Foundry logs from doppler firehose
    # (for message format see https://github.com/cloudfoundry-community/firehose-to-syslog
    # and https://github.com/cloudfoundry/dropsonde-protocol/tree/master/events)
    json {
      source => "@message"
      target => "parsed_json_field"
    }

    if "_jsonparsefailure" in [tags] {

        # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
        mutate {
            add_tag => ["fail/cloudfoundry/app/json"]
            remove_tag => ["_jsonparsefailure"]
        }

    } else {

        # Rework log message.
        #
        # 1) Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.
        #    Seems that passing a string with an actual newline in it is the only way to make gsub work.
        # 2) Replace the unicode Null character \u0000 with ""
        mutate {
          gsub => [ "[parsed_json_field][msg]", '\u2028', "
"
          ]
          gsub => [ "[parsed_json_field][msg]", '\u0000', ""]
        }

        # Set @message and @level
        mutate {
          rename => { "[parsed_json_field][msg]" => "@message" } # @message
          rename => { "[parsed_json_field][level]" => "@level" } # @level
        }
        
        # Set @timestamp
        ruby { # convert [parsed_json_field][timestamp] from nanosec-from-epoch number to Datetime
          init => "require 'time'"
          code => "time_in_nanosec_from_epoch = event['[parsed_json_field][timestamp]']
                     time_in_seconds = time_in_nanosec_from_epoch / 10 ** 9
                     milliseconds = time_in_nanosec_from_epoch % 10 ** 9 / 1000.to_f
                     event['[parsed_json_field][timestamp]'] = Time.at(time_in_seconds, milliseconds).iso8601(6)
                     "
        }
        date {
          match => [ "[parsed_json_field][timestamp]", "ISO8601" ] # date
        }
        mutate {
          remove_field => [ "[parsed_json_field][timestamp]", "[parsed_json_field][time]" ]
        }

        # Set @source fields
        mutate {
          rename => { "[parsed_json_field][ip]"          => "[@source][host]" }
          rename => { "[parsed_json_field][deployment]"  => "[@source][deployment]" }
          rename => { "[parsed_json_field][job]"         => "[@source][job]" }
          rename => { "[parsed_json_field][index]"       => "[@source][instance]" }
          # override
          rename => { "[parsed_json_field][origin]"      => "[@source][component]" }
          rename => { "[parsed_json_field][source_type]" => "[@source][type]" }
          # we rely on [@source][type] value in next scripts so uppercase it for consistency
          uppercase => [ "[@source][type]" ]
        }

        # Set @cf fields
        mutate {
          rename => { "[parsed_json_field][cf_org_id]"     => "[@cf][org_id]" }
          rename => { "[parsed_json_field][cf_org_name]"   => "[@cf][org]" }
          rename => { "[parsed_json_field][cf_space_id]"   => "[@cf][space_id]" }
          rename => { "[parsed_json_field][cf_space_name]" => "[@cf][space]" }
          rename => { "[parsed_json_field][cf_app_id]"     => "[@cf][app_id]" }
          rename => { "[parsed_json_field][cf_app_name]"   => "[@cf][app]" }
          rename => { "[parsed_json_field][cf_origin]"     => "[@cf][origin]" }
        }

        # Set @type
        mutate {
          rename => { "[parsed_json_field][event_type]" => "@type" }
        }
        alter {
          coalesce => [ "@type", "%{@type}", "UnknownEvent" ]
        }

        # Define [parsed_json_field_name]
        mutate {
          add_field => { "parsed_json_field_name" => "%{@type}"}
        }

        # Override @metadata.index
        if [@cf][org] {
            mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][org]}" } }
            if [@cf][space] {
                mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@cf][space]}" } }
            }
            mutate { lowercase => [ "[@metadata][index]" ] }
        }
    }

}
