if [@type] in ["syslog", "relp"] and [syslog_program] == "doppler" {

    # Parse Cloud Foundry logs from doppler firehose (via https://github.com/SpringerPE/firehose-to-syslog)

    json {
      source => "@message"
      target => "app"
    }

    if "_jsonparsefailure" in [tags] {

        # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
        mutate {
            add_tag => ["fail/cloudfoundry/firehose/jsonparsefailure_of_syslog_message"]
            remove_tag => ["_jsonparsefailure"]
        }

    } else {

        # -------- message additional parsing ----------

        # by default all logs should have event_type LogMessage
        if ![app][event_type] {
            mutate {
                add_field => [ "[app][event_type]", "LogMessage" ] 
            }
        }

        # app @source
        mutate {
            rename => { "[app][cf_org_id]"     => "[@source][org_id]" }
            rename => { "[app][cf_org_name]"   => "[@source][org]" }
            rename => { "[app][cf_space_id]"   => "[@source][space_id]" }
            rename => { "[app][cf_space_name]" => "[@source][space]" }
            rename => { "[app][cf_app_id]"     => "[@source][app_id]" }
            rename => { "[app][cf_app_name]"   => "[@source][app]" }
            
            rename => { "[app][origin]"        => "[@source][origin]" } # CF logging component        
            rename => { "[app][message_type]"  => "[@source][message_type]" } # OUT/ ERR
        }

        # Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.  Seems that passing a string with an actual newline in it is the only way to make gsub work
        mutate {
          gsub => [ "[app][msg]", '\u2028', "
"
          ]
        } 
        # Replace the unicode Null character \u0000 with \n
        mutate {
          gsub => [ "[app][msg]", '\u0000', ""]
        }
        # Ignore logs with empty msg
        if [msg] =~ /^\s*$/ or [msg] =~ /^#.*$/ {
          drop { }
        }

        # ------------ specific fields ----------------
        
        # @timestamp
        ruby { # convert [app][timestamp] from nanosec-from-epoch number to Datetime
            init => "require 'time'"
            code => "time_in_nanosec_from_epoch = event['[app][timestamp]']
                     time_in_seconds = time_in_nanosec_from_epoch / 10 ** 9
                     milliseconds = time_in_nanosec_from_epoch % 10 ** 9 / 1000.to_f
                     event['[app][timestamp]'] = Time.at(time_in_seconds, milliseconds).iso8601(6)
                     "
        }
        date {
            match => [ "[app][timestamp]", "ISO8601" ] # date
        }

        # @message and @level
        mutate {
            rename => { "[app][msg]" => "@message" } # @message
            rename => { "[app][level]" => "@level" } # @level
        }

        # remove unnecessary fields
        mutate {
            remove_field => "[app][time]"
            remove_field => "[app][timestamp]"
            remove_field => "[app][cf_origin]"
        }

        # ------------- common fields ------------------

        # @input
        mutate {
          add_field => { "@input" => "%{@type}" }
        }

        # @shipper
        mutate {
          replace => { "[@shipper][priority]" => "%{syslog_pri}" }
          replace => { "[@shipper][name]" => "%{syslog_program}_%{[@type]}" }
        }

        # @source (component, instance, name, host) & @shipper
        mutate {
          rename => { "[host]" => "[@source][host]" }
          rename => { "[app][source_type]" => "[@source][component]" }
          rename => { "[app][source_instance]" => "[@source][instance]" }
        }
        mutate {
          add_field => { "[@source][name]" => "%{[@source][component]}/%{[@source][instance]}" }
        }
        mutate {
          convert => { "[@source][instance]" => "integer" }
        }

        # --------- index, @type and tags -----------
        # app index name
        mutate { replace => { "[@metadata][index]" => "app" } }
        if [@source][org] {
            mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@source][org]}" } }
            if [@source][space] {
                mutate { replace => { "[@metadata][index]" => "%{[@metadata][index]}-%{[@source][space]}" } }
            }
            mutate { lowercase => [ "[@metadata][index]" ] }
        }

        mutate {
          replace => { "@type" => "%{[app][event_type]}" }
          remove_field => "[app][event_type]"
          add_tag => [ "app" ]
        }
        # ----------- special cases processing -------------
        # ----------------------------
        # Special Case - Metrics logs |
        # ----------------------------
        if( [app][event_type] == "ContainerMetric" ) {
            # @source (component, instance, name)
            mutate {
              add_tag => "container_metric"
              replace => {"[@source][component]" => "METRIC"}
              replace => {"[@source][instance]" => "%{[app][instance_index]}"}
            }
            mutate {
              add_field => { "[@source][name]" => "%{[@source][component]}/%{[@source][instance]}" }
            }
            mutate {
              convert => { "[@source][instance]" => "integer" }
            }
            mutate {
              rename => { "[app][cpu_percentage]" => "[container][cpu_percentage]" }
              rename => { "[app][memory_bytes]" => "[container][memory_bytes]" }
              rename => { "[app][disk_bytes]" => "[container][disk_bytes]" }
              remove_field => "[app][instance_index]"
            }
            # @message
            mutate {
              replace => {"@message" => "Container metrics: cpu=%{[container][cpu_percentage]}, memory=%{[container][memory_bytes]}, disk=%{[container][disk_bytes]}"}         
            }
        }
        # ------------------------
        # Special Case - RTR logs |
        # ------------------------
        if ('RTR' in [@source][component]) {
            grok {

                #cf-release > v222 - includes x_forwarded_proto
                match => { '@message' => '%{HOSTNAME:[rtr][hostname]} - \[(?<rtr_time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[rtr][verb]} %{URIPATHPARAM:[rtr][path]} %{PROG:[rtr][http_spec]}\" %{BASE10NUM:[rtr][status]:int} %{BASE10NUM:[rtr][request_bytes_received]:int} %{BASE10NUM:[rtr][body_bytes_sent]:int} \"%{GREEDYDATA:[rtr][referer]}\" \"%{GREEDYDATA:[rtr][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[rtr][x_forwarded_for]}\" x_forwarded_proto:\"%{GREEDYDATA:[rtr][x_forwarded_proto]}\" vcap_request_id:%{NOTSPACE:[rtr][vcap_request_id]} response_time:%{NUMBER:[rtr][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }
                
                #cf-release > v205 - includes RequestBytesReceived
                match => { '@message' => '%{HOSTNAME:[rtr][hostname]} - \[(?<rtr_time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[rtr][verb]} %{URIPATHPARAM:[rtr][path]} %{PROG:[rtr][http_spec]}\" %{BASE10NUM:[rtr][status]:int} %{BASE10NUM:[rtr][request_bytes_received]:int} %{BASE10NUM:[rtr][body_bytes_sent]:int} \"%{GREEDYDATA:[rtr][referer]}\" \"%{GREEDYDATA:[rtr][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[rtr][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[rtr][vcap_request_id]} response_time:%{NUMBER:[rtr][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }
                
                #cf-release <= v205
                match => { '@message' => '%{HOSTNAME:[rtr][hostname]} - \[(?<rtr_time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[rtr][verb]} %{URIPATHPARAM:[rtr][path]} %{PROG:[rtr][http_spec]}\" %{BASE10NUM:[rtr][status]:int} %{BASE10NUM:[rtr][body_bytes_sent]:int} \"%{GREEDYDATA:[rtr][referer]}\" \"%{GREEDYDATA:[rtr][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[rtr][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[rtr][vcap_request_id]} response_time:%{NUMBER:[rtr][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }
                
                tag_on_failure => [ 'fail/firehose/RTR' ]
                add_tag => "RTR"
            }

            if !("fail/firehose/RTR" in [tags]) {
                
                if [rtr_time] {
                  mutate {
                    rename => { "rtr_time" => "[rtr][timestamp]" }
                  }
                }

                # set @level based on HTTP status
                if [rtr][status] >= 400 {
                    mutate {
                        replace => { "@level" => "ERROR" } # @level
                    }
                }

                if [rtr][x_forwarded_for] {
                    mutate {
                        gsub => ["[rtr][x_forwarded_for]","[\s\\"]",""] # remove quotes and whitespace
                        split => ["[rtr][x_forwarded_for]", ","] # format is client, proxy1, proxy2 ...
                    }

                   ruby {
                       code => "event['rtr']['response_time_ms'] = (event['rtr']['response_time_sec']*1000).to_int"
                       remove_field => "response_time_sec"
                   }

                   mutate {
                      add_field => ["[rtr][remote_addr]", "%{[rtr][x_forwarded_for][0]}"]
                   }

                   if ([rtr][remote_addr] =~ /([0-9]{1,3}\.){3}[0-9]{1,3}/) {
                       geoip {
                         source => "[rtr][remote_addr]"
                       }
                   }
                }
            }
        }

        ## -------------- Custom Config Start --------------- ##
        # ------------------------
        # Special Case - App logs |
        # ------------------------
        # Parse App logs based on msg format (mark unknown format with [unknown_msg_format] tag)
        if( [@source][component] == "App" ) {

          ## ---- Format 1: JSON
          # check if it is JSON
          if [@message] =~ /^\s*{".*}\s*$/ {
          
            json {
              source => "@message"
              target => "log"
            }

            if !("_jsonparsefailure" in [tags]) {

              # conacat message and exception
              if ( [log][exception] ) {

                mutate {
                  ## NOTE: keep line break and new line spacing (new line is inserted in logstash in such a way)
                  replace => { "@message" => "%{[log][message]}
%{[log][exception]}" }
                  remove_field => [ "[log][message]", "[log][exception]" ]
                }
              } else {

                mutate {
                  rename => { "[log][message]" => "@message" }
                }
              }

            } else {

              mutate {
                add_tag => ["unknown_msg_format"]
                remove_tag => ["_jsonparsefailure"]
              }
            } 

          ## ---- Format 2: "[CONTAINER] .." (Tomcat logs)
         } else if [@message] =~ /^\s*\[CONTAINER\]/ {

            # Tomcat specific parsing (in accordance with https://github.com/cloudfoundry/java-buildpack-support/blob/master/tomcat-logging-support/src/main/java/com/gopivotal/cloudfoundry/tomcat/logging/CloudFoundryFormatter.java)
            grok {
              match => [ "@message", "(?m)(?<log_logger>\[CONTAINER\]%{SPACE}%{NOTSPACE})%{SPACE}%{LOGLEVEL:[log][level]}%{SPACE}%{GREEDYDATA:@message}" ]
              overwrite => [ "@message" ]
              tag_on_failure => [ "unknown_msg_format" ]
            }
            mutate {
              rename => { "log_logger" => "[log][logger]" }
            }

          } else {

            ## ---- Format 3: Logback status logs
            grok {
              match => [ "@message", "%{TIME} \|\-%{LOGLEVEL:[log][level]} in %{NOTSPACE:[log][logger]} - %{GREEDYDATA:@message}" ]
              overwrite => [ "@message" ]

            ## ---- Unknown Format: otherwise set with 'unknown_msg_format' tag
              tag_on_failure => [ "unknown_msg_format" ]
            }
          }

          mutate {
            rename => { "[log][level]" => "@level" } # @level
          }

        }
        ## -------------- Custom Config End --------------- ##

    }

}
