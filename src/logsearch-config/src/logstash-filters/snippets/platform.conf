##------------------------------
# Platform conf. Parses CF logs.|
##------------------------------
if [@index_type] == "platform" {

    mutate {
        replace => { "[@source][type]" => "system" } # default for platform logs
        add_tag => "platform"
    }

    # Syslog message with RFC 5424 and the enterprise number is CF
    if [syslog_sd_id] == "instance@47450" {
        mutate {
            add_field => {
                "[@source][az]" => "%{[syslog_sd_params][az]}"
                "[@source][deployment]" => "%{[syslog_sd_params][deployment]}"
                "[@source][id]" => "%{[syslog_sd_params][id]}"
                "[@source][job]" => "%{[syslog_sd_params][group]}"
            }
            replace => {
                "[@source][type]" => "cf"
                "@type" => "cf"
            }
            add_tag => "cf"
        }
        if [@source][component] == "gorouter" {
            if [@message] =~ "\A\{.+\}\z" {
                  json {
                      source => "@message"
                      add_tag => [ "router/syslog" ]
                      tag_on_failure => [ "router/parsing_failed" ]
                  }
            } else {
                grok {
                    match => { "@message" => "%{HOSTNAME:Request_Host} %{NOTSPACE} \[%{TIMESTAMP_ISO8601:access_timestamp}\] \"%{WORD:Request_Method} %{URIPATHPARAM:Request_URL} %{SYSLOGPROG:Request_Protocol}\" %{NUMBER:Status_Code:int} %{NUMBER:Bytes_Received:int} %{NUMBER:Bytes_Sent:int} \"%{NOTSPACE:Referer}\" \"%{DATA:User_Agent}\" \"%{URIHOST:Remote_Address}\" \"%{URIHOST:Backend_Address}\" x_forwarded_for:\"%{DATA:X_Forwarded_For}\" x_forwarded_proto:\"%{WORD:X_Forwarded_Proto}\" vcap_request_id:\"%{DATA:X_Vcap_Request_ID}\" response_time:%{NUMBER:Response_Time:float} app_id:\"%{DATA:app_id}\" app_index:\"%{DATA:app_index}\" %{GREEDYDATA:@message}" }
                    overwrite => [ "@message" ]
                    add_tag => "router/accesslog"
                    tag_on_failure => "router/parsing_failed"
                }

            }
        }
    } else {
        # Try parsing with possible CF formats
        grok {
            # Metron agent format (https://github.com/cloudfoundry/loggregator/blob/master/jobs/metron_agent/templates/syslog_forwarder.conf.erb#L53)
            match => [ "@message", "\[job=%{NOTSPACE:[@source][job]} index=%{INT:[@source][index]:int}\]%{SPACE}%{GREEDYDATA:@message}" ]

            # Syslog release format (https://github.com/cloudfoundry/syslog-release/blob/master/jobs/syslog_forwarder/templates/rsyslog.conf.erb#L56)
            match => [ "@message", "\[bosh instance=%{NOTSPACE:[@source][deployment]}/%{NOTSPACE:[@source][job]}/%{NOTSPACE:[@source][job_index]}\]%{SPACE}%{GREEDYDATA:@message}" ]

            overwrite => [ "@message" ] # @message
            tag_on_failure => "fail/cloudfoundry/platform/grok"
        }

        if !("fail/cloudfoundry/platform/grok" in [tags]) {
            mutate {
                replace => { "[@source][type]" => "cf" }
                replace => { "@type" => "cf" }
                add_tag => "cf"
            }
        }
    }
}
