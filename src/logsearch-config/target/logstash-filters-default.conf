# All logs start being sent to the unparsed index.  
# The filters below will route them to the @index=app or @index=platform
mutate {
    add_field => { "[@metadata][index]" => "unparsed" }
    add_field => { "[@metadata][type]" => "%{[@type]}" }
    remove_field => "@type" 
}

if [@metadata][type] in ["syslog", "relp"] and [syslog_program] == "doppler" {
# Parse Cloud Foundry logs from doppler firehose (via https://github.com/SpringerPE/firehose-to-syslog)

json {
    source => 'syslog_message'
}

if "_jsonparsefailure" in [tags] {

    # Amend the failure tag to match our fail/${addon}/${filter}/${detail} standard
    mutate {
        add_tag => ["fail/cloudfoundry/firehose/jsonparsefailure_of_syslog_message"]
        remove_tag => ["_jsonparsefailure"]
    }

} else {

    date {
        match => [ "time", "ISO8601" ]
    }

    #Ensure that we always have an event_type, in prep for adding metrics
    if ![event_type] {
        mutate {
            add_field => [ "event_type", "LogMessage" ]
        }
    }

    mutate {
        rename => { "[cf_app_id]" => "[@source][app][id]" }
        rename => { "[cf_app_name]" => "[@source][app][name]" }
        rename => { "[cf_space_id]" => "[@source][space][id]" }
        rename => { "[cf_space_name]" => "[@source][space][name]" }
        rename => { "[cf_org_id]" => "[@source][org][id]" }
        rename => { "[cf_org_name]" => "[@source][org][name]" }

        rename => { "[level]" => "[@level]" }
        uppercase => [ "[@level]" ]

        rename => { "[host]" => "[@source][host]" }
        rename => { "[source_type]" => "[@source][component]" }
        rename => { "[source_instance]" => "[@source][instance]" }
        add_field => { "[@source][name]" => "%{[@source][component]}/%{[@source][instance]}" }
        convert => { "[@source][instance]" => "integer" }

        rename => { "[message_type]" => "[@source][message_type]" }
        rename => { "[origin]" => "[@source][origin]" }

        rename => { "[msg]" => "[@message]" }
    }

    # Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.  Seems that passing a string with an actual newline in it is the only way to make gsub work
    mutate {
      gsub => [ "[@message]", '\u2028', "
"
      ]
    }

    if ('RTR' in [@source][component]) {
        grok {
            #cf-release > v205 - includes RequestBytesReceived
            match => { '@message' => '%{HOSTNAME:[RTR][hostname]} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[RTR][verb]} %{URIPATHPARAM:[RTR][path]} %{PROG:[RTR][http_spec]}\" %{BASE10NUM:[RTR][status]:int} %{BASE10NUM:[RTR][request_bytes_received]:int} %{BASE10NUM:[RTR][body_bytes_sent]:int} \"%{GREEDYDATA:[RTR][referer]}\" \"%{GREEDYDATA:[RTR][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[RTR][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[RTR][vcap_request_id]} response_time:%{NUMBER:[RTR][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }

            #cf-release <= v205
            match => { '@message' => '%{HOSTNAME:[RTR][hostname]} - \[(?<time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[RTR][verb]} %{URIPATHPARAM:[RTR][path]} %{PROG:[RTR][http_spec]}\" %{BASE10NUM:[RTR][status]:int} %{BASE10NUM:[RTR][body_bytes_sent]:int} \"%{GREEDYDATA:[RTR][referer]}\" \"%{GREEDYDATA:[RTR][http_user_agent]}\" %{HOSTPORT} x_forwarded_for:\"%{GREEDYDATA:[RTR][x_forwarded_for]}\" vcap_request_id:%{NOTSPACE:[RTR][vcap_request_id]} response_time:%{NUMBER:[RTR][response_time_sec]:float} app_id:%{NOTSPACE}%{GREEDYDATA}' }
            overwrite => [ "time" ]
            tag_on_failure => [ 'fail/firehose/RTR' ]
        }

        if !("fail/firehose/RTR" in [tags]) {
            date {
                match => [ "time", "dd/MM/y:HH:mm:ss Z" ]
            }
            if [RTR][x_forwarded_for] {
                mutate {
                    gsub => ["[RTR][x_forwarded_for]","[\s\\"]",""] # remove quotes and whitespace
                    split => ["[RTR][x_forwarded_for]", ","] # format is client, proxy1, proxy2 ...
                }
               
               ruby {
                   code => "event['RTR']['response_time_ms'] = (event['RTR']['response_time_sec']*1000).to_int"
                   remove_field => "response_time_sec"
               }

               mutate {
                  add_field => ["[RTR][remote_addr]", "%{[RTR][x_forwarded_for][0]}"]
               }

               if ([RTR][remote_addr] =~ /([0-9]{1,3}\.){3}[0-9]{1,3}/) {
                   geoip {
                     source => "[RTR][remote_addr]"
                   }
               }
            }
        }
    }

    # Cleanup unused fields
    mutate {
        remove_field => "time"
        remove_field => "timestamp"
        remove_field => "received_from"
        remove_field => "received_at"
        remove_field => "syslog_message"
        remove_field => "syslog_severity_code"
        remove_field => "syslog_facility_code"
        remove_field => "syslog_facility"
        remove_field => "syslog_severity"
        remove_field => "syslog_pri"
        remove_field => "syslog_program"
        remove_field => "syslog_pid"
        remove_field => "syslog_hostname"
        remove_field => "syslog_timestamp"
    }

    #Route to index and type
    mutate {
        replace => { "[@metadata][index]" => "app" }
        replace => { "[@metadata][type]" => "%{[event_type]}" }
        remove_field => "[event_type]"
        add_tag => [ 'firehose' ] 
    }

}

  if "firehose" in [tags] {
    # Parse messages from /v2/events api logged by https://github.com/stayup-io/cf-app-events-logger 

if [@message] =~ /.*"event_type":"AppEvent".*/  {

    json {
        source => "[@message]"
        target => "[app_event]"
        add_tag => "app_event"
    }

    date {
        match => [ "[app_event][timestamp]", "ISO8601" ]
    }

    ruby {
        code => "event['@metadata']['app_event_metadata_as_string'] = event['app_event']['metadata'].to_s"
    }
    mutate {
        replace => { "[@message]" => "%{[app_event][type]} %{[@metadata][app_event_metadata_as_string]}" }
    }

    mutate {
        replace => { "[@source][component]" => "AppEvent" }
        replace => { "[@source][instance]" => "0" }
        convert => { "[@source][instance]" => "integer" }
        replace => { "[@source][name]" => "AppEvent/0" }

        replace => { "[@source][app][id]" => "%{[app_event][app_id]}" }
        replace => { "[@source][app][name]" => "%{[app_event][app_name]}" }
        replace => { "[@source][space][id]" => "%{[app_event][space_guid]}" }
        replace => { "[@source][space][name]" => "%{[app_event][space_name]}" }
        replace => { "[@source][org][id]" => "%{[app_event][organization_guid]}" }
        replace => { "[@source][org][name]" => "%{[app_event][organization_name]}" }

        replace => { "[@metadata][type]" => "app_event" }

        remove_field => [ "[@source][message_type]", "[@source][origin]", "[@source][host]" ]
    }

}


  }
} else if [@metadata][type] in ["syslog", "relp"] and [@source.host] == "loggregator" {
# Parse Cloud Foundry logs from loggregator (syslog)
# see https://github.com/cloudfoundry/loggregator/blob/master/src/loggregator/sinks/syslogwriter/syslog_writer.go#L156

mutate {
    add_field => [ "tmp_syslog_procid" ,"%{syslog_procid}" ]
}

# [App/0] => [App, 0]
mutate {
    gsub => [ "tmp_syslog_procid", "[\[\]]", "" ]
    split => [ "tmp_syslog_procid", "/" ]
    add_field => [ "source_type" ,"%{[tmp_syslog_procid][0]}"  ]
    add_field => [ "source_instance" ,"%{[tmp_syslog_procid][1]}"  ]
    remove_field => [ "tmp_syslog_procid" ]
}

# For source types with no instance number, remove the field
if [source_instance] == "%{[tmp_syslog_procid][1]}" {
    mutate {
      remove_field => [ "source_instance" ]
    }
}

#If it looks like JSON, it must be JSON...
if [syslog_message] =~ /^\s*{".*}\s*$/ {
    json {
        source => "syslog_message"
    }
     # @todo seems like some messages have @timestamp in them? seems ci-specific
    date {
        match => [ "@timestamp", "ISO8601" ]
    }
} else {
    mutate {
        add_field => [ "message", "%{syslog_message}" ]
    }
    if [message] == "-" {
        mutate {
            remove_field => "message"
        }
    }
}
 mutate {
    rename => [ "syslog_program", "@source.app_id" ]
}
 mutate {
    add_tag => "cloudfoundry_loggregator"
    remove_field => "syslog_facility"
    remove_field => "syslog_facility_code"
    remove_field => "syslog_message"
    remove_field => "syslog_severity"
    remove_field => "syslog_severity_code"
    remove_field => "syslog5424_ver"
    remove_field => "syslog6587_msglen"
}

} else if [@metadata][type] in ["syslog", "relp"] and [syslog_program] == "vcap.uaa" {
grok {
    match => { "syslog_message" => "\[job=%{NOTSPACE:jobname}%{SPACE}index=%{NOTSPACE:jobindex}\]%{SPACE}\[%{TIMESTAMP_ISO8601:uaa_timestamp}\]%{SPACE}uaa%{SPACE}-%{SPACE}%{NUMBER:pid:int}%{SPACE}\[%{DATA:thread_name}\]%{SPACE}....%{SPACE}%{LOGLEVEL:@loglevel}%{SPACE}---%{SPACE}Audit:%{SPACE}%{WORD:audit_event_type}%{SPACE}\('%{DATA:audit_event_data}'\):%{SPACE}principal=%{DATA:audit_event_principal},%{SPACE}origin=\[%{DATA:audit_event_origin}\],%{SPACE}identityZoneId=\[%{DATA:audit_event_identity_zone_id}\]" }
    tag_on_failure => [
        "fail/cloudfoundry/uaa-audit"
    ]
    add_tag => "uaa-audit"
}

if !("fail/cloudfoundry/uaa-audit" in [tags]) {
    date {
        match => [ "uaa_timestamp", "ISO8601" ]
        remove_field => "uaa_timestamp"
    }

    if "PrincipalAuthenticationFailure" == [audit_event_type] {
        mutate {
            add_field => { "audit_event_remote_address" => "%{audit_event_origin}" }
       }
    }

    if [audit_event_origin] =~ /remoteAddress=/ {
        grok {
            match => { "audit_event_origin" => "remoteAddress=%{IP:audit_event_remote_address}" }
        }
    }

    if [audit_event_remote_address] {
       geoip {
          source => "audit_event_remote_address"
       }
    }

    mutate {
        remove_field => "syslog_pri"
        remove_field => "syslog_facility"
        remove_field => "syslog_facility_code"
        remove_field => "syslog_message"
        remove_field => "syslog_severity"
        remove_field => "syslog_severity_code"

        rename => { "syslog_program" => "[@source][syslog_program]" }
        rename => { "@source.host"   => "[@source][host]" }
        rename => { "jobname"        => "[@source][job][name]" }
        rename => { "jobindex"       => "[@source][job][index]" }

        split =>  { "audit_event_origin" => ", " }
    }

    mutate {
       #replace => { "[@metadata][index]" => "platform" }
        replace => { "[@metadata][type]" => "uaa-audit" }
     }
}

} else if "collector" in [tags] {
# Parse Cloud Foundry Collector

mutate {
    add_field => { "[@source][component]" => "%{[attributes][job]}" }
    add_field => { "[@source][instance]" => "%{[attributes][index]}" }
    add_field => { "[@source][deployment]" => "%{[attributes][deployment]}" }
    add_field => { "[@source][host]" => "%{[attributes][ip]}" }
    remove_field => [ "[attributes]" ]
}

mutate {
    add_field => { "[@source][name]" => "%{[@source][component]}/%{[@source][instance]}" }
}

mutate {
    rename => { "[key]" => "[metric][key]" }
    convert => { "[value]" => "string" }
}

if [value] =~ /^[-+]?\d+$/ {
    mutate { 
        rename => { "[value]" => "[metric][value_int]" }
        convert => { "[metric][value_int]" => "integer" }
    }
} else {
    mutate { 
        rename => { "[value]" => "[metric][value_float]" }
        convert => { "[metric][value_float]" => "float" }
    }
}

mutate {
    remove_field => [ "level", "facility", "file", "line", "version", "source_host", "host" ]
}

#Route to index and type
mutate {
    replace => { "[@metadata][index]" => "platform" }
    replace => { "[@metadata][type]" => "metric" }
    add_tag => "metric"
}

} else if [@metadata][type] in ["syslog", "relp"] and [syslog_program] =~ /vcap\..*/ {
# Parse Cloud Foundry logs from syslog_aggregator

grok {
    match => { "syslog_message" => "(?:\[job=%{NOTSPACE:[@job][name]}|-) +(?:index=%{NOTSPACE:[@job][index]}\]|-) %{GREEDYDATA:_message_json}" }
    tag_on_failure => [
        "_grokparsefailure-cf-vcap"
    ]
}

if !("_grokparsefailure-cf-vcap" in [tags]) {
    kv {
        source => "msgdata"
        field_split => " "
        target => "msgdata"
    }

    json {
        source => "_message_json"
        remove_field => "_message_json"
    }

    mutate {
        rename => [ "syslog_program", "[@shipper][name]" ]
        replace => [ "[@job][host]", "%{[@source][host]}" ]
        gsub => [
            "[@shipper][name]", "\.", "_",
            "[@job][name]", "\.", "_"
          ]
    }

    if [source] == "NatsStreamForwarder" {
        json {
            source => "[data][nats_message]"
            target => "nats_message"
        }

        mutate {
            remove_field => "[data][nats_message]"
        }
    }

    mutate {
        add_tag => "cloudfoundry_vcap"
        replace => [ "[@shipper][priority]", "%{syslog_pri}" ]
        replace => [ "[@shipper][name]", "%{[@shipper][name]}_%{[@metadata][type]}" ]
    }

    mutate {
        remove_field => "syslog_facility"
        remove_field => "syslog_facility_code"
        remove_field => "syslog_message"
        remove_field => "syslog_severity"
        remove_field => "syslog_severity_code"
    }

    mutate {
        #replace => { "[@metadata][index]" => "platform" }
        replace => { "[@metadata][type]" => "%{[@metadata][type]}_cf" }
    }
}

}

#Cleanup
mutate {
  rename => { "[tags]" => "[@tags]" }
  remove_field => [ "@version" ]
}
